import React from 'react';
import ProductList from '../home/ProductList';
import styled from 'styled-components';
import { getSoldList } from '../../lib/api/product';
import { useEffect } from 'react';
import { useState } from 'react';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';
import { useInfiniteQuery } from '@tanstack/react-query';
import useIntersectionObserver from '../../hooks/useIntersectionObserver';
import { Page } from '../../types/product/product';
import Loading from '../common/Loading';
import FailFetchData from '../common/FailFetchData';
import DataNull from '../common/DataNull';
import { isEmpty } from 'lodash';

const Container = styled.div`
    padding:0px 20px;
    background-color: rgba( 0, 0, 0, 0.5 );
    
`
interface IProps{
    userId:number;
}

const CompletedProducts:React.FC<IProps> = ({userId}) => {
    // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÏùò idÍ∞íÏùÑ Î∞õÏïÑÏÑú ÌåêÎß§Ï§ëÏù∏ ÏÉÅÌíà Î∞õÏïÑÏò§Îäî apiÌò∏Ï∂ú
    const APIuserId = userId
    console.log('CompletedProducts id',APIuserId)

    const {
        data, // üí° data.pagesÎ•º Í∞ñÍ≥† ÏûàÎäî Î∞∞Ïó¥
        fetchNextPage, // üí° Îã§Ïùå ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
        hasNextPage, // Îã§Ïùå ÌéòÏù¥ÏßÄÍ∞Ä ÏûàÎäîÏßÄ Ïó¨Î∂Ä, Boolean
        status,
        isFetching 
    } = useInfiniteQuery(
          ["SoldList"] 
        , async (pageParam)=> await getSoldList(pageParam,APIuserId)
        , {
            getNextPageParam: (lastPage:Page,pages:Page[]) => {
                const lastPageNumber = 
                Math.ceil(lastPage.totalPage/10)
                // Ïù¥ Í∞íÏúºÎ°ú ÎùºÏä§Ìä∏ÎÑòÎ≤ÑÍ∞í ÏßÄÏ†ï
                if(pages.length<lastPageNumber){
                    return pages.length
                }else{
                    return undefined
				}
            }
          }
        )
        console.log('infinitquery completed',data)
        // Î¨¥ÌïúÏä§ÌÅ¨Î°§ Íµ¨ÌòÑ
        const onIntersect: IntersectionObserverCallback = ([{ isIntersecting }]) => {
            if(isIntersecting && hasNextPage){
                fetchNextPage();
            }
        };
        // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ ÌÉÄÍ≤ü ÏßÄÏ†ï
        const { setTarget } = useIntersectionObserver({ onIntersect });

    return (
        <Container>
            {status === "loading" && <Loading/>}
            {status === "error" && <FailFetchData/>}
            {status === "success" &&
                data.pages.map((page, index) => 
                isEmpty(page.contents) ? <DataNull key={index} text='Í±∞ÎûòÏôÑÎ£åÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§'/> :
                <>
                    <div className='hideProductBox'></div>
                    <ProductList key={index} setTarget={setTarget}  completedProducts={true} data={page.contents} />
                </>
            )}
        </Container>
    );
};
export default React.memo(CompletedProducts);